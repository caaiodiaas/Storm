{"ast":null,"code":"/**\n * Serialize data into a cookie header.\n */\nfunction serialize(name, val, options) {\n  var opt = options || {};\n  var enc = encodeURIComponent;\n  /* eslint-disable-next-line no-control-regex */\n\n  var fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\n  if (typeof enc !== 'function') {\n    throw new TypeError('option encode is invalid');\n  }\n\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid');\n  }\n\n  var value = enc(val);\n\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid');\n  }\n\n  var str = name + '=' + value;\n\n  if (null != opt.maxAge) {\n    var maxAge = opt.maxAge - 0;\n\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\n      throw new TypeError('option maxAge is invalid');\n    }\n\n    str += '; Max-Age=' + Math.floor(maxAge);\n  }\n\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid');\n    }\n\n    str += '; Domain=' + opt.domain;\n  }\n\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid');\n    }\n\n    str += '; Path=' + opt.path;\n  }\n\n  if (opt.expires) {\n    if (typeof opt.expires.toUTCString !== 'function') {\n      throw new TypeError('option expires is invalid');\n    }\n\n    str += '; Expires=' + opt.expires.toUTCString();\n  }\n\n  if (opt.httpOnly) {\n    str += '; HttpOnly';\n  }\n\n  if (opt.secure) {\n    str += '; Secure';\n  }\n\n  if (opt.sameSite) {\n    var sameSite = typeof opt.sameSite === 'string' ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n    switch (sameSite) {\n      case 'lax':\n        str += '; SameSite=Lax';\n        break;\n\n      case 'strict':\n        str += '; SameSite=Strict';\n        break;\n\n      case 'none':\n        str += '; SameSite=None';\n        break;\n\n      default:\n        throw new TypeError('option sameSite is invalid');\n    }\n  }\n\n  return str;\n}\n/**\n * Based on the environment and the request we know if a secure cookie can be set.\n */\n\n\nfunction isSecureEnvironment(req) {\n  if (!req || !req.headers || !req.headers.host) {\n    throw new Error('The \"host\" request header is not available');\n  }\n\n  var host = req.headers.host.indexOf(':') > -1 && req.headers.host.split(':')[0] || req.headers.host;\n\n  if (['localhost', '127.0.0.1'].indexOf(host) > -1 || host.endsWith('.local')) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Serialize a cookie to a string.\n */\n\n\nfunction serializeCookie(cookie, secure) {\n  var _a, _b, _c;\n\n  return serialize(cookie.name, cookie.value, {\n    maxAge: cookie.maxAge,\n    expires: new Date(Date.now() + cookie.maxAge * 1000),\n    httpOnly: true,\n    secure: secure,\n    path: (_a = cookie.path) !== null && _a !== void 0 ? _a : '/',\n    domain: (_b = cookie.domain) !== null && _b !== void 0 ? _b : '',\n    sameSite: (_c = cookie.sameSite) !== null && _c !== void 0 ? _c : 'lax'\n  });\n}\n/**\n * Get Cookie Header strings.\n */\n\n\nexport function getCookieString(req, res, cookies) {\n  var strCookies = cookies.map(function (c) {\n    return serializeCookie(c, isSecureEnvironment(req));\n  });\n  var previousCookies = res.getHeader('Set-Cookie');\n\n  if (previousCookies) {\n    if (previousCookies instanceof Array) {\n      Array.prototype.push.apply(strCookies, previousCookies);\n    } else if (typeof previousCookies === 'string') {\n      strCookies.push(previousCookies);\n    }\n  }\n\n  return strCookies;\n}\n/**\n * Set one or more cookies.\n */\n\nexport function setCookies(req, res, cookies) {\n  res.setHeader('Set-Cookie', getCookieString(req, res, cookies));\n}\n/**\n * Set one or more cookies.\n */\n\nexport function setCookie(req, res, cookie) {\n  setCookies(req, res, [cookie]);\n}\nexport function deleteCookie(req, res, name) {\n  setCookie(req, res, {\n    name: name,\n    value: '',\n    maxAge: -1\n  });\n}","map":null,"metadata":{},"sourceType":"module"}