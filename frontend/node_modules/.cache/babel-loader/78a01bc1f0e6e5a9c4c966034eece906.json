{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\caiod\\\\OneDrive\\\\Documentos\\\\GitHub\\\\storm\\\\frontend-storm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\caiod\\\\OneDrive\\\\Documentos\\\\GitHub\\\\storm\\\\frontend-storm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport PostgrestQueryBuilder from './lib/PostgrestQueryBuilder';\nimport PostgrestRpcBuilder from './lib/PostgrestRpcBuilder';\nimport { DEFAULT_HEADERS } from './lib/constants';\n\nvar PostgrestClient = /*#__PURE__*/function () {\n  /**\n   * Creates a PostgREST client.\n   *\n   * @param url  URL of the PostgREST endpoint.\n   * @param headers  Custom headers.\n   * @param schema  Postgres schema to switch to.\n   */\n  function PostgrestClient(url) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$headers = _ref.headers,\n        headers = _ref$headers === void 0 ? {} : _ref$headers,\n        schema = _ref.schema,\n        fetch = _ref.fetch,\n        throwOnError = _ref.throwOnError;\n\n    _classCallCheck(this, PostgrestClient);\n\n    this.url = url;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.schema = schema;\n    this.fetch = fetch;\n    this.shouldThrowOnError = throwOnError;\n  }\n  /**\n   * Authenticates the request with JWT.\n   *\n   * @param token  The JWT token to use.\n   */\n\n\n  _createClass(PostgrestClient, [{\n    key: \"auth\",\n    value: function auth(token) {\n      this.headers['Authorization'] = \"Bearer \".concat(token);\n      return this;\n    }\n    /**\n     * Perform a table operation.\n     *\n     * @param table  The table name to operate on.\n     */\n\n  }, {\n    key: \"from\",\n    value: function from(table) {\n      var url = \"\".concat(this.url, \"/\").concat(table);\n      return new PostgrestQueryBuilder(url, {\n        headers: this.headers,\n        schema: this.schema,\n        fetch: this.fetch,\n        shouldThrowOnError: this.shouldThrowOnError\n      });\n    }\n    /**\n     * Perform a function call.\n     *\n     * @param fn  The function name to call.\n     * @param params  The parameters to pass to the function call.\n     * @param head  When set to true, no data will be returned.\n     * @param count  Count algorithm to use to count rows in a table.\n     */\n\n  }, {\n    key: \"rpc\",\n    value: function rpc(fn, params) {\n      var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          _ref2$head = _ref2.head,\n          head = _ref2$head === void 0 ? false : _ref2$head,\n          _ref2$count = _ref2.count,\n          count = _ref2$count === void 0 ? null : _ref2$count;\n\n      var url = \"\".concat(this.url, \"/rpc/\").concat(fn);\n      return new PostgrestRpcBuilder(url, {\n        headers: this.headers,\n        schema: this.schema,\n        fetch: this.fetch,\n        shouldThrowOnError: this.shouldThrowOnError\n      }).rpc(params, {\n        head: head,\n        count: count\n      });\n    }\n  }]);\n\n  return PostgrestClient;\n}();\n\nexport { PostgrestClient as default };","map":null,"metadata":{},"sourceType":"module"}