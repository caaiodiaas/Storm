{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\caiod\\\\OneDrive\\\\Documentos\\\\GitHub\\\\storm\\\\frontend-storm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\caiod\\\\OneDrive\\\\Documentos\\\\GitHub\\\\storm\\\\frontend-storm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\caiod\\\\OneDrive\\\\Documentos\\\\GitHub\\\\storm\\\\frontend-storm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\caiod\\\\OneDrive\\\\Documentos\\\\GitHub\\\\storm\\\\frontend-storm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\caiod\\\\OneDrive\\\\Documentos\\\\GitHub\\\\storm\\\\frontend-storm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\caiod\\\\OneDrive\\\\Documentos\\\\GitHub\\\\storm\\\\frontend-storm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { PostgrestBuilder } from './types';\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder';\n\nvar PostgrestRpcBuilder = /*#__PURE__*/function (_PostgrestBuilder) {\n  _inherits(PostgrestRpcBuilder, _PostgrestBuilder);\n\n  function PostgrestRpcBuilder(url) {\n    var _this;\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$headers = _ref.headers,\n        headers = _ref$headers === void 0 ? {} : _ref$headers,\n        schema = _ref.schema,\n        fetch = _ref.fetch,\n        shouldThrowOnError = _ref.shouldThrowOnError;\n\n    _classCallCheck(this, PostgrestRpcBuilder);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PostgrestRpcBuilder).call(this, {\n      fetch: fetch,\n      shouldThrowOnError: shouldThrowOnError\n    }));\n    _this.url = new URL(url);\n    _this.headers = Object.assign({}, headers);\n    _this.schema = schema;\n    return _this;\n  }\n  /**\n   * Perform a function call.\n   */\n\n\n  _createClass(PostgrestRpcBuilder, [{\n    key: \"rpc\",\n    value: function rpc(params) {\n      var _this2 = this;\n\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref2$head = _ref2.head,\n          head = _ref2$head === void 0 ? false : _ref2$head,\n          _ref2$count = _ref2.count,\n          count = _ref2$count === void 0 ? null : _ref2$count;\n\n      if (head) {\n        this.method = 'HEAD';\n\n        if (params) {\n          Object.entries(params).forEach(function (_ref3) {\n            var _ref4 = _slicedToArray(_ref3, 2),\n                name = _ref4[0],\n                value = _ref4[1];\n\n            _this2.url.searchParams.append(name, value);\n          });\n        }\n      } else {\n        this.method = 'POST';\n        this.body = params;\n      }\n\n      if (count) {\n        if (this.headers['Prefer'] !== undefined) this.headers['Prefer'] += \",count=\".concat(count);else this.headers['Prefer'] = \"count=\".concat(count);\n      }\n\n      return new PostgrestFilterBuilder(this);\n    }\n  }]);\n\n  return PostgrestRpcBuilder;\n}(PostgrestBuilder);\n\nexport { PostgrestRpcBuilder as default };","map":null,"metadata":{},"sourceType":"module"}