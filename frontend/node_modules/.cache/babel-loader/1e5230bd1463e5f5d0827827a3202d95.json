{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\caiod\\\\OneDrive\\\\Documentos\\\\GitHub\\\\storm\\\\frontend-storm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\caiod\\\\OneDrive\\\\Documentos\\\\GitHub\\\\storm\\\\frontend-storm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\caiod\\\\OneDrive\\\\Documentos\\\\GitHub\\\\storm\\\\frontend-storm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\caiod\\\\OneDrive\\\\Documentos\\\\GitHub\\\\storm\\\\frontend-storm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\caiod\\\\OneDrive\\\\Documentos\\\\GitHub\\\\storm\\\\frontend-storm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport PostgrestTransformBuilder from './PostgrestTransformBuilder';\n\nvar PostgrestFilterBuilder = /*#__PURE__*/function (_PostgrestTransformBu) {\n  _inherits(PostgrestFilterBuilder, _PostgrestTransformBu);\n\n  function PostgrestFilterBuilder() {\n    var _this;\n\n    _classCallCheck(this, PostgrestFilterBuilder);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PostgrestFilterBuilder).apply(this, arguments));\n    /** @deprecated Use `contains()` instead. */\n\n    _this.cs = _this.contains;\n    /** @deprecated Use `containedBy()` instead. */\n\n    _this.cd = _this.containedBy;\n    /** @deprecated Use `rangeLt()` instead. */\n\n    _this.sl = _this.rangeLt;\n    /** @deprecated Use `rangeGt()` instead. */\n\n    _this.sr = _this.rangeGt;\n    /** @deprecated Use `rangeGte()` instead. */\n\n    _this.nxl = _this.rangeGte;\n    /** @deprecated Use `rangeLte()` instead. */\n\n    _this.nxr = _this.rangeLte;\n    /** @deprecated Use `rangeAdjacent()` instead. */\n\n    _this.adj = _this.rangeAdjacent;\n    /** @deprecated Use `overlaps()` instead. */\n\n    _this.ov = _this.overlaps;\n    return _this;\n  }\n  /**\n   * Finds all rows which doesn't satisfy the filter.\n   *\n   * @param column  The column to filter on.\n   * @param operator  The operator to filter with.\n   * @param value  The value to filter with.\n   */\n\n\n  _createClass(PostgrestFilterBuilder, [{\n    key: \"not\",\n    value: function not(column, operator, value) {\n      this.url.searchParams.append(\"\".concat(column), \"not.\".concat(operator, \".\").concat(value));\n      return this;\n    }\n    /**\n     * Finds all rows satisfying at least one of the filters.\n     *\n     * @param filters  The filters to use, separated by commas.\n     * @param foreignTable  The foreign table to use (if `column` is a foreign column).\n     */\n\n  }, {\n    key: \"or\",\n    value: function or(filters) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          foreignTable = _ref.foreignTable;\n\n      var key = typeof foreignTable === 'undefined' ? 'or' : \"\".concat(foreignTable, \".or\");\n      this.url.searchParams.append(key, \"(\".concat(filters, \")\"));\n      return this;\n    }\n    /**\n     * Finds all rows whose value on the stated `column` exactly matches the\n     * specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n\n  }, {\n    key: \"eq\",\n    value: function eq(column, value) {\n      this.url.searchParams.append(\"\".concat(column), \"eq.\".concat(value));\n      return this;\n    }\n    /**\n     * Finds all rows whose value on the stated `column` doesn't match the\n     * specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n\n  }, {\n    key: \"neq\",\n    value: function neq(column, value) {\n      this.url.searchParams.append(\"\".concat(column), \"neq.\".concat(value));\n      return this;\n    }\n    /**\n     * Finds all rows whose value on the stated `column` is greater than the\n     * specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n\n  }, {\n    key: \"gt\",\n    value: function gt(column, value) {\n      this.url.searchParams.append(\"\".concat(column), \"gt.\".concat(value));\n      return this;\n    }\n    /**\n     * Finds all rows whose value on the stated `column` is greater than or\n     * equal to the specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n\n  }, {\n    key: \"gte\",\n    value: function gte(column, value) {\n      this.url.searchParams.append(\"\".concat(column), \"gte.\".concat(value));\n      return this;\n    }\n    /**\n     * Finds all rows whose value on the stated `column` is less than the\n     * specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n\n  }, {\n    key: \"lt\",\n    value: function lt(column, value) {\n      this.url.searchParams.append(\"\".concat(column), \"lt.\".concat(value));\n      return this;\n    }\n    /**\n     * Finds all rows whose value on the stated `column` is less than or equal\n     * to the specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n\n  }, {\n    key: \"lte\",\n    value: function lte(column, value) {\n      this.url.searchParams.append(\"\".concat(column), \"lte.\".concat(value));\n      return this;\n    }\n    /**\n     * Finds all rows whose value in the stated `column` matches the supplied\n     * `pattern` (case sensitive).\n     *\n     * @param column  The column to filter on.\n     * @param pattern  The pattern to filter with.\n     */\n\n  }, {\n    key: \"like\",\n    value: function like(column, pattern) {\n      this.url.searchParams.append(\"\".concat(column), \"like.\".concat(pattern));\n      return this;\n    }\n    /**\n     * Finds all rows whose value in the stated `column` matches the supplied\n     * `pattern` (case insensitive).\n     *\n     * @param column  The column to filter on.\n     * @param pattern  The pattern to filter with.\n     */\n\n  }, {\n    key: \"ilike\",\n    value: function ilike(column, pattern) {\n      this.url.searchParams.append(\"\".concat(column), \"ilike.\".concat(pattern));\n      return this;\n    }\n    /**\n     * A check for exact equality (null, true, false), finds all rows whose\n     * value on the stated `column` exactly match the specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n\n  }, {\n    key: \"is\",\n    value: function is(column, value) {\n      this.url.searchParams.append(\"\".concat(column), \"is.\".concat(value));\n      return this;\n    }\n    /**\n     * Finds all rows whose value on the stated `column` is found on the\n     * specified `values`.\n     *\n     * @param column  The column to filter on.\n     * @param values  The values to filter with.\n     */\n\n  }, {\n    key: \"in\",\n    value: function _in(column, values) {\n      var cleanedValues = values.map(function (s) {\n        // handle postgrest reserved characters\n        // https://postgrest.org/en/v7.0.0/api.html#reserved-characters\n        if (typeof s === 'string' && new RegExp('[,()]').test(s)) return \"\\\"\".concat(s, \"\\\"\");else return \"\".concat(s);\n      }).join(',');\n      this.url.searchParams.append(\"\".concat(column), \"in.(\".concat(cleanedValues, \")\"));\n      return this;\n    }\n    /**\n     * Finds all rows whose json, array, or range value on the stated `column`\n     * contains the values specified in `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n\n  }, {\n    key: \"contains\",\n    value: function contains(column, value) {\n      if (typeof value === 'string') {\n        // range types can be inclusive '[', ']' or exclusive '(', ')' so just\n        // keep it simple and accept a string\n        this.url.searchParams.append(\"\".concat(column), \"cs.\".concat(value));\n      } else if (Array.isArray(value)) {\n        // array\n        this.url.searchParams.append(\"\".concat(column), \"cs.{\".concat(value.join(','), \"}\"));\n      } else {\n        // json\n        this.url.searchParams.append(\"\".concat(column), \"cs.\".concat(JSON.stringify(value)));\n      }\n\n      return this;\n    }\n    /**\n     * Finds all rows whose json, array, or range value on the stated `column` is\n     * contained by the specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n\n  }, {\n    key: \"containedBy\",\n    value: function containedBy(column, value) {\n      if (typeof value === 'string') {\n        // range\n        this.url.searchParams.append(\"\".concat(column), \"cd.\".concat(value));\n      } else if (Array.isArray(value)) {\n        // array\n        this.url.searchParams.append(\"\".concat(column), \"cd.{\".concat(value.join(','), \"}\"));\n      } else {\n        // json\n        this.url.searchParams.append(\"\".concat(column), \"cd.\".concat(JSON.stringify(value)));\n      }\n\n      return this;\n    }\n    /**\n     * Finds all rows whose range value on the stated `column` is strictly to the\n     * left of the specified `range`.\n     *\n     * @param column  The column to filter on.\n     * @param range  The range to filter with.\n     */\n\n  }, {\n    key: \"rangeLt\",\n    value: function rangeLt(column, range) {\n      this.url.searchParams.append(\"\".concat(column), \"sl.\".concat(range));\n      return this;\n    }\n    /**\n     * Finds all rows whose range value on the stated `column` is strictly to\n     * the right of the specified `range`.\n     *\n     * @param column  The column to filter on.\n     * @param range  The range to filter with.\n     */\n\n  }, {\n    key: \"rangeGt\",\n    value: function rangeGt(column, range) {\n      this.url.searchParams.append(\"\".concat(column), \"sr.\".concat(range));\n      return this;\n    }\n    /**\n     * Finds all rows whose range value on the stated `column` does not extend\n     * to the left of the specified `range`.\n     *\n     * @param column  The column to filter on.\n     * @param range  The range to filter with.\n     */\n\n  }, {\n    key: \"rangeGte\",\n    value: function rangeGte(column, range) {\n      this.url.searchParams.append(\"\".concat(column), \"nxl.\".concat(range));\n      return this;\n    }\n    /**\n     * Finds all rows whose range value on the stated `column` does not extend\n     * to the right of the specified `range`.\n     *\n     * @param column  The column to filter on.\n     * @param range  The range to filter with.\n     */\n\n  }, {\n    key: \"rangeLte\",\n    value: function rangeLte(column, range) {\n      this.url.searchParams.append(\"\".concat(column), \"nxr.\".concat(range));\n      return this;\n    }\n    /**\n     * Finds all rows whose range value on the stated `column` is adjacent to\n     * the specified `range`.\n     *\n     * @param column  The column to filter on.\n     * @param range  The range to filter with.\n     */\n\n  }, {\n    key: \"rangeAdjacent\",\n    value: function rangeAdjacent(column, range) {\n      this.url.searchParams.append(\"\".concat(column), \"adj.\".concat(range));\n      return this;\n    }\n    /**\n     * Finds all rows whose array or range value on the stated `column` overlaps\n     * (has a value in common) with the specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n\n  }, {\n    key: \"overlaps\",\n    value: function overlaps(column, value) {\n      if (typeof value === 'string') {\n        // range\n        this.url.searchParams.append(\"\".concat(column), \"ov.\".concat(value));\n      } else {\n        // array\n        this.url.searchParams.append(\"\".concat(column), \"ov.{\".concat(value.join(','), \"}\"));\n      }\n\n      return this;\n    }\n    /**\n     * Finds all rows whose text or tsvector value on the stated `column` matches\n     * the tsquery in `query`.\n     *\n     * @param column  The column to filter on.\n     * @param query  The Postgres tsquery string to filter with.\n     * @param config  The text search configuration to use.\n     * @param type  The type of tsquery conversion to use on `query`.\n     */\n\n  }, {\n    key: \"textSearch\",\n    value: function textSearch(column, query) {\n      var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          config = _ref2.config,\n          _ref2$type = _ref2.type,\n          type = _ref2$type === void 0 ? null : _ref2$type;\n\n      var typePart = '';\n\n      if (type === 'plain') {\n        typePart = 'pl';\n      } else if (type === 'phrase') {\n        typePart = 'ph';\n      } else if (type === 'websearch') {\n        typePart = 'w';\n      }\n\n      var configPart = config === undefined ? '' : \"(\".concat(config, \")\");\n      this.url.searchParams.append(\"\".concat(column), \"\".concat(typePart, \"fts\").concat(configPart, \".\").concat(query));\n      return this;\n    }\n    /**\n     * Finds all rows whose tsvector value on the stated `column` matches\n     * to_tsquery(`query`).\n     *\n     * @param column  The column to filter on.\n     * @param query  The Postgres tsquery string to filter with.\n     * @param config  The text search configuration to use.\n     *\n     * @deprecated Use `textSearch()` instead.\n     */\n\n  }, {\n    key: \"fts\",\n    value: function fts(column, query) {\n      var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          config = _ref3.config;\n\n      var configPart = typeof config === 'undefined' ? '' : \"(\".concat(config, \")\");\n      this.url.searchParams.append(\"\".concat(column), \"fts\".concat(configPart, \".\").concat(query));\n      return this;\n    }\n    /**\n     * Finds all rows whose tsvector value on the stated `column` matches\n     * plainto_tsquery(`query`).\n     *\n     * @param column  The column to filter on.\n     * @param query  The Postgres tsquery string to filter with.\n     * @param config  The text search configuration to use.\n     *\n     * @deprecated Use `textSearch()` with `type: 'plain'` instead.\n     */\n\n  }, {\n    key: \"plfts\",\n    value: function plfts(column, query) {\n      var _ref4 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          config = _ref4.config;\n\n      var configPart = typeof config === 'undefined' ? '' : \"(\".concat(config, \")\");\n      this.url.searchParams.append(\"\".concat(column), \"plfts\".concat(configPart, \".\").concat(query));\n      return this;\n    }\n    /**\n     * Finds all rows whose tsvector value on the stated `column` matches\n     * phraseto_tsquery(`query`).\n     *\n     * @param column  The column to filter on.\n     * @param query  The Postgres tsquery string to filter with.\n     * @param config  The text search configuration to use.\n     *\n     * @deprecated Use `textSearch()` with `type: 'phrase'` instead.\n     */\n\n  }, {\n    key: \"phfts\",\n    value: function phfts(column, query) {\n      var _ref5 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          config = _ref5.config;\n\n      var configPart = typeof config === 'undefined' ? '' : \"(\".concat(config, \")\");\n      this.url.searchParams.append(\"\".concat(column), \"phfts\".concat(configPart, \".\").concat(query));\n      return this;\n    }\n    /**\n     * Finds all rows whose tsvector value on the stated `column` matches\n     * websearch_to_tsquery(`query`).\n     *\n     * @param column  The column to filter on.\n     * @param query  The Postgres tsquery string to filter with.\n     * @param config  The text search configuration to use.\n     *\n     * @deprecated Use `textSearch()` with `type: 'websearch'` instead.\n     */\n\n  }, {\n    key: \"wfts\",\n    value: function wfts(column, query) {\n      var _ref6 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          config = _ref6.config;\n\n      var configPart = typeof config === 'undefined' ? '' : \"(\".concat(config, \")\");\n      this.url.searchParams.append(\"\".concat(column), \"wfts\".concat(configPart, \".\").concat(query));\n      return this;\n    }\n    /**\n     * Finds all rows whose `column` satisfies the filter.\n     *\n     * @param column  The column to filter on.\n     * @param operator  The operator to filter with.\n     * @param value  The value to filter with.\n     */\n\n  }, {\n    key: \"filter\",\n    value: function filter(column, operator, value) {\n      this.url.searchParams.append(\"\".concat(column), \"\".concat(operator, \".\").concat(value));\n      return this;\n    }\n    /**\n     * Finds all rows whose columns match the specified `query` object.\n     *\n     * @param query  The object to filter with, with column names as keys mapped\n     *               to their filter values.\n     */\n\n  }, {\n    key: \"match\",\n    value: function match(query) {\n      var _this2 = this;\n\n      Object.keys(query).forEach(function (key) {\n        _this2.url.searchParams.append(\"\".concat(key), \"eq.\".concat(query[key]));\n      });\n      return this;\n    }\n  }]);\n\n  return PostgrestFilterBuilder;\n}(PostgrestTransformBuilder);\n\nexport { PostgrestFilterBuilder as default };","map":null,"metadata":{},"sourceType":"module"}