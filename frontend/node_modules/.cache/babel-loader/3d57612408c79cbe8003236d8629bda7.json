{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\caiod\\\\OneDrive\\\\Documentos\\\\GitHub\\\\storm\\\\frontend-storm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\caiod\\\\OneDrive\\\\Documentos\\\\GitHub\\\\storm\\\\frontend-storm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\caiod\\\\OneDrive\\\\Documentos\\\\GitHub\\\\storm\\\\frontend-storm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\caiod\\\\OneDrive\\\\Documentos\\\\GitHub\\\\storm\\\\frontend-storm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\caiod\\\\OneDrive\\\\Documentos\\\\GitHub\\\\storm\\\\frontend-storm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { PostgrestBuilder } from './types';\n/**\n * Post-filters (transforms)\n */\n\nvar PostgrestTransformBuilder = /*#__PURE__*/function (_PostgrestBuilder) {\n  _inherits(PostgrestTransformBuilder, _PostgrestBuilder);\n\n  function PostgrestTransformBuilder() {\n    _classCallCheck(this, PostgrestTransformBuilder);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PostgrestTransformBuilder).apply(this, arguments));\n  }\n\n  _createClass(PostgrestTransformBuilder, [{\n    key: \"select\",\n\n    /**\n     * Performs vertical filtering with SELECT.\n     *\n     * @param columns  The columns to retrieve, separated by commas.\n     */\n    value: function select() {\n      var columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '*';\n      // Remove whitespaces except when quoted\n      var quoted = false;\n      var cleanedColumns = columns.split('').map(function (c) {\n        if (/\\s/.test(c) && !quoted) {\n          return '';\n        }\n\n        if (c === '\"') {\n          quoted = !quoted;\n        }\n\n        return c;\n      }).join('');\n      this.url.searchParams.set('select', cleanedColumns);\n      return this;\n    }\n    /**\n     * Orders the result with the specified `column`.\n     *\n     * @param column  The column to order on.\n     * @param ascending  If `true`, the result will be in ascending order.\n     * @param nullsFirst  If `true`, `null`s appear first.\n     * @param foreignTable  The foreign table to use (if `column` is a foreign column).\n     */\n\n  }, {\n    key: \"order\",\n    value: function order(column) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref$ascending = _ref.ascending,\n          ascending = _ref$ascending === void 0 ? true : _ref$ascending,\n          _ref$nullsFirst = _ref.nullsFirst,\n          nullsFirst = _ref$nullsFirst === void 0 ? false : _ref$nullsFirst,\n          foreignTable = _ref.foreignTable;\n\n      var key = typeof foreignTable === 'undefined' ? 'order' : \"\".concat(foreignTable, \".order\");\n      var existingOrder = this.url.searchParams.get(key);\n      this.url.searchParams.set(key, \"\".concat(existingOrder ? \"\".concat(existingOrder, \",\") : '').concat(column, \".\").concat(ascending ? 'asc' : 'desc', \".\").concat(nullsFirst ? 'nullsfirst' : 'nullslast'));\n      return this;\n    }\n    /**\n     * Limits the result with the specified `count`.\n     *\n     * @param count  The maximum no. of rows to limit to.\n     * @param foreignTable  The foreign table to use (for foreign columns).\n     */\n\n  }, {\n    key: \"limit\",\n    value: function limit(count) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          foreignTable = _ref2.foreignTable;\n\n      var key = typeof foreignTable === 'undefined' ? 'limit' : \"\".concat(foreignTable, \".limit\");\n      this.url.searchParams.set(key, \"\".concat(count));\n      return this;\n    }\n    /**\n     * Limits the result to rows within the specified range, inclusive.\n     *\n     * @param from  The starting index from which to limit the result, inclusive.\n     * @param to  The last index to which to limit the result, inclusive.\n     * @param foreignTable  The foreign table to use (for foreign columns).\n     */\n\n  }, {\n    key: \"range\",\n    value: function range(from, to) {\n      var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          foreignTable = _ref3.foreignTable;\n\n      var keyOffset = typeof foreignTable === 'undefined' ? 'offset' : \"\".concat(foreignTable, \".offset\");\n      var keyLimit = typeof foreignTable === 'undefined' ? 'limit' : \"\".concat(foreignTable, \".limit\");\n      this.url.searchParams.set(keyOffset, \"\".concat(from)); // Range is inclusive, so add 1\n\n      this.url.searchParams.set(keyLimit, \"\".concat(to - from + 1));\n      return this;\n    }\n    /**\n     * Sets the AbortSignal for the fetch request.\n     */\n\n  }, {\n    key: \"abortSignal\",\n    value: function abortSignal(signal) {\n      this.signal = signal;\n      return this;\n    }\n    /**\n     * Retrieves only one row from the result. Result must be one row (e.g. using\n     * `limit`), otherwise this will result in an error.\n     */\n\n  }, {\n    key: \"single\",\n    value: function single() {\n      this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n      return this;\n    }\n    /**\n     * Retrieves at most one row from the result. Result must be at most one row\n     * (e.g. using `eq` on a UNIQUE column), otherwise this will result in an\n     * error.\n     */\n\n  }, {\n    key: \"maybeSingle\",\n    value: function maybeSingle() {\n      var _this2 = this;\n\n      this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n\n      var _this = new PostgrestTransformBuilder(this);\n\n      _this.then = function (onfulfilled, onrejected) {\n        return _this2.then(function (res) {\n          var _a, _b;\n\n          if ((_b = (_a = res.error) === null || _a === void 0 ? void 0 : _a.details) === null || _b === void 0 ? void 0 : _b.includes('Results contain 0 rows')) {\n            return onfulfilled({\n              error: null,\n              data: null,\n              count: res.count,\n              status: 200,\n              statusText: 'OK',\n              body: null\n            });\n          }\n\n          return onfulfilled(res);\n        }, onrejected);\n      };\n\n      return _this;\n    }\n    /**\n     * Set the response type to CSV.\n     */\n\n  }, {\n    key: \"csv\",\n    value: function csv() {\n      this.headers['Accept'] = 'text/csv';\n      return this;\n    }\n  }]);\n\n  return PostgrestTransformBuilder;\n}(PostgrestBuilder);\n\nexport { PostgrestTransformBuilder as default };","map":null,"metadata":{},"sourceType":"module"}